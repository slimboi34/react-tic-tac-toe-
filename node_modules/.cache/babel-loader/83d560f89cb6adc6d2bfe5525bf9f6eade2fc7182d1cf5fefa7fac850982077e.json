{"ast":null,"code":"var _jsxFileName = \"/Users/josh/react_Dash_board/react-admin/build/static/js/react_tic_tac_toe/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Board } from \"./components/Board\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const [xPlaying, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({\n    xScore: 0,\n    oScore: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const handleBoxClick = boxIdx => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? \"X\" : \"O\";\n      } else {\n        return value;\n      }\n    });\n    setBoard(updatedBoard);\n\n    // Step 2: Check if either player has won the game\n    const winner = checkWinner(updatedBoard);\n    if (winner) {\n      if (winner === \"O\") {\n        let {\n          oScore\n        } = scores;\n        oScore += 1;\n        setScores({\n          ...scores,\n          oScore\n        });\n      } else {\n        let {\n          xScore\n        } = scores;\n        xScore += 1;\n        setScores({\n          ...scores,\n          xScore\n        });\n      }\n    }\n\n    // Step 3: Change active player\n    setXPlaying(!xPlaying);\n  };\n  const checkWinner = board => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ScoreBoard, {\n      scores: scores,\n      xPlaying: xPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onClick: gameOver ? resetBoard : handleBoxClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n      resetBoard: resetBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rWElEKVYPntsQAjtIoZWIILpIGM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Board","ResetButton","ScoreBoard","App","WIN_CONDITIONS","xPlaying","setXPlaying","board","setBoard","Array","fill","scores","setScores","xScore","oScore","gameOver","setGameOver","handleBoxClick","boxIdx","updatedBoard","map","value","idx","winner","checkWinner","i","length","x","y","z","resetBoard"],"sources":["/Users/josh/react_Dash_board/react-admin/build/static/js/react_tic_tac_toe/tic-tac-toe/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { Board } from \"./components/Board\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport './App.css';\n\nconst App = () => {\n\n  const WIN_CONDITIONS = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n\n  const [xPlaying, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [scores, setScores] = useState({ xScore: 0, oScore: 0 })\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleBoxClick = (boxIdx) => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? \"X\" : \"O\";\n      } else {\n        return value;\n      }\n    })\n\n    setBoard(updatedBoard);\n\n    // Step 2: Check if either player has won the game\n    const winner = checkWinner(updatedBoard);\n\n    if (winner) {\n      if (winner === \"O\") {\n        let { oScore } = scores;\n        oScore += 1;\n        setScores({ ...scores, oScore })\n      } else {\n        let { xScore } = scores;\n        xScore += 1;\n        setScores({ ...scores, xScore })\n      }\n    }\n\n    // Step 3: Change active player\n    setXPlaying(!xPlaying);\n  }\n\n  const checkWinner = (board) => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  }\n\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  }\n\n  return (\n    <div className=\"App\">\n      <ScoreBoard scores={scores} xPlaying={xPlaying} />\n      <Board board={board} onClick={gameOver ? resetBoard : handleBoxClick} />\n      <ResetButton resetBoard={resetBoard} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}